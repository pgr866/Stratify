import axios from "axios";

// Define the base API URL based on the environment (production or development)
const URL = process.env.NODE_ENV === "production"
	? `${import.meta.env.VITE_ENV_PATH}/api/v1/`
	: "http://localhost:8000/api/v1/"

const api = axios.create({
	baseURL: URL,
	withCredentials: true,
});

// Interceptor to handle errors globally
api.interceptors.response.use(
	(response) => response,
	(error) => {
		if (error.response) {
			console.error("API Error:", error.response.data);
			if (error.response.status === 401) {
				window.location.href = "/login";
			}
		} else {
			console.error("Network Error:", error.message);
		}
		return Promise.reject(error);
	}
);

// User Interface
export interface User {
	id: string;
	username: string;
	email: string;
	dark_theme: boolean;
	dashboard_real_trading: boolean;
	timezone: string;
	password?: string;
}

// API Keys Interface
export interface ApiKey {
	exchange: string;
	api_key?: string;
	secret?: string;
	password?: string;
	uid?: string;
}

// Candle Interface
export interface Candle {
	time: number;
	open: number;
	high: number;
	low: number;
	close: number;
	volume: number;
}

// Indicator Interface
export interface Indicator {
	id: string;
	name: string;
	short_name: string;
	params?: {
		key: string;
		value: number;
	}[];
	data?: {
		time: number; // in milliseconds
		[key: string]: number; // dynamic indicator columns
	}[];
}

// Strategy Interface
export interface Strategy {
	id?: string; // Optional since it's generated by the backend
	user: string; // UUID of the user
	name: string;
	exchange: string;
	symbol: string;
	timeframe: string;
	timestamp_start: number;
	timestamp_end: number;
	indicators: Indicator[]; // Indicators configuration
	is_public: boolean;
	clones_count: number;
}

export interface StrategyExecution {
	id: string;
	strategy_id: string; // UUID of the strategy
	type: string;
	order_conditions: string;
	running: boolean;
	exchange: string;
	symbol: string;
	timeframe: string;
	timestamp_start: number;
	timestamp_end: number;
	indicators: string;
	maker_fee: number;
	taker_fee: number;
	initial_tradable_value: number;
	leverage: number;
	execution_timestamp?: number;
	abs_net_profit?: number;
	rel_net_profit?: number;
	total_closed_trades?: number;
	winning_trade_rate?: number;
	profit_factor?: number;
	abs_avg_trade_profit?: number;
	rel_avg_trade_profit?: number;
	abs_max_run_up?: number;
	rel_max_run_up?: number;
	abs_max_drawdown?: number;
	rel_max_drawdown?: number;
	trades?: Trade[];
}

export interface Trade {
	id: string;
	type: string;
	side: string;
	timestamp: number;
	price: number;
	amount: number;
	cost: number;
	avg_entry_price: number;
	abs_profit: number;
	rel_profit: number;
	abs_cum_profit: number;
	rel_cum_profit: number;
	abs_hodling_profit: number;
	rel_hodling_profit: number;
	abs_runup: number;
	rel_runup: number;
	abs_drawdown: number;
	rel_drawdown: number;
}

export interface DashboardStats {
	is_real_trading: boolean;
	total_net_profit: number;
	total_closed_trades: number;
	winning_trade_rate: number;
	profit_factor: number;
	avg_trade_profit: number;
	rel_cum_profit: number[];
	recent_trades: RecentTrade[];
}

export interface RecentTrade {
	strategy_id: string;
	strategy_execution_id: string;
	strategy_name: string;
	timestamp: number;
	symbol: string;
	side: string;
	rel_profit: number;
}

interface Condition {
	start_parenthesis: boolean;
	left_operand: number | string;
	operator: '==' | '!=' | '<' | '>' | '<=' | '>=' | 'crossunder' | 'crossabove';
	right_operand: number | string;
	end_parenthesis: boolean;
	logical_operator: 'and' | 'or' | 'xor' | '';
}

interface Order {
	type: 'market' | 'limit' | 'cancel_all_open_orders';
	side: 'buy' | 'sell';
	price: number | string; // Use current market price if type is 'market'
	amount: number | string; // Amount in base currency
}

export interface OrderCondition {
	conditions: Condition[];
	orders: Order[];
}

// ** User Management API Calls **

// Get Authenticated User
export const getAuthUser = () => api.get<User>("user/me/");

// Send update account verification to email
export const sendEmailUpdateAccount = (email: string, username: string, password: string) => api.post("send-email-update-account/", { email, username, password });

// Update Authenticated User Account
export const updateAccount = (email: string, username: string, password: string, code: string) =>
	api.put<User>("user/me/", { email, username, password, code });

// Send delete account verification to email
export const sendEmailDeleteAccount = (password: string) => api.post("send-email-delete-account/", { password });

// Delete Authenticated User Account
export const deleteAccount = (password: string, code: string) => api.delete("user/me/", { data: { password, code } });

// Send sing-up verification to email
export const sendEmailSignup = (email: string, username: string, password: string) => api.post("send-email-signup/", { email, username, password });

// Create a new user
export const signup = (user: User, code: string) => api.post<User>("signup/", { ...user, code });

// Send recover password verification to email
export const sendEmailRecoverPassword = (email: string, new_password: string) => api.post("send-email-recover-password/", { email, new_password });

// Recover password
export const recoverPassword = (email: string, new_password: string, code: string) => api.post("recover-password/", { email, new_password, code });

// Toggle Theme
export const toggleTheme = () => api.patch("toggle-theme/");

// Update Timezone
export const updateTimezone = (timezone: string) => api.patch("update-timezone/", { timezone });

// ** Authentication API Calls **

// Login
export const login = (username: string, password: string) => api.post("login/", { username, password });

// Logout
export const logout = () => api.post("logout/");

// Google Login
export const googleLogin = (token: string, timezone: string, dark_theme: boolean) =>
	api.post("google-login/", { timezone, dark_theme }, { headers: { Authorization: `Bearer ${token}` } });

// GitHub Login
export const githubLogin = (code: string, timezone: string, dark_theme: boolean) =>
	api.post("github-login/", { code, timezone, dark_theme });


// ** API Keys Management **

// Get API Keys Exchanges
export const getApiKeysExchanges = () => api.get<string[]>("apiKey/");

// Create or Update API Keys
export const createUpdateApiKeys = (api_key: ApiKey) => api.post("apiKey/", api_key);

// Delete API Keys
export const deleteApiKeys = (exchange: string) => api.delete(`apiKey/${exchange}/`);


// ** Exchange Data **

// Get all ccxt exchanges
export const getAllExchanges = () => api.get("exchanges/");

// Get available symbols and supported timeframes for an exchange
export const getExchangeSymbols = (exchange: string) => api.get('symbols/', { params: { exchange } });

// Get market info for an exchange and a symbol
export const getMarketInfo = (exchange: string, symbol: string) => api.get('market-info/', { params: { exchange, symbol } });

// Get candles for a specific exchange, symbol and timeframe
export const getCandles = (
	exchange: string,
	symbol: string,
	timeframe: string,
	timestamp_start: number,
	timestamp_end: number
) => api.get<Candle[]>('candles/', { params: { exchange, symbol, timeframe, timestamp_start, timestamp_end } });

// ** Strategy Management **

// Get public strategies
export const getPublicStrategies = () => api.get<Strategy[]>("strategy/");

// Get user's strategies
export const getUserStrategies = () => api.get<Strategy[]>("strategy/me/");

// Get specific strategy
export const getStrategy = (id: string) => api.get<Strategy>(`strategy/${id}/`);

// Create new strategy
export const createStrategy = () => api.post<Strategy>("strategy/me/");

// Update strategy
export const updateStrategy = (id: string, strategy: Strategy) => api.put<Strategy>(`strategy/${id}/`, strategy);

// Delete strategy
export const deleteStrategy = (id: string) => api.delete(`strategy/${id}/`);

// Clone strategy
export const cloneStrategy = (strategy_id: string, execution_id: string) => api.post<Strategy>(`strategy/${strategy_id}/clone/`, execution_id ? { execution_id } : {});

// Get specific indicator
export const getIndicator = (
	strategy_id: string,
	indicator_id: string,
	timestamp_start: number,
	timestamp_end: number
) => api.get<Indicator>('indicator/', { params: { strategy_id, indicator_id, timestamp_start, timestamp_end } });

// Get all executions for a given strategy
export const getMyStrategyExecutions = (strategy_id: string) => api.get("strategy-execution/", { params: { strategy_id } });

// Get a specific strategy execution by ID
export const getStrategyExecution = (id: string) => api.get<StrategyExecution>(`strategy-execution/${id}/`);

// Delete a specific strategy execution by ID
export const deleteStrategyExecution = (id: string) => api.delete(`strategy-execution/${id}/`);

// Start a specific strategy execution by ID
export const startStrategyExecution = (strategy_id: string, maker_fee: number, taker_fee: number, initial_tradable_value: number, leverage: number, type: string, order_conditions: string) => api.post<StrategyExecution>("strategy-execution/start/", { strategy_id, maker_fee, taker_fee, initial_tradable_value, leverage, type, order_conditions });

// Stop a specific strategy execution by ID
export const stopStrategyExecution = (id: string) => api.patch<StrategyExecution>(`strategy-execution/${id}/stop/`);

// Get dashboard stats
export const getDashboardStats = (timestamp_start: number, timestamp_end: number, is_real_trading: boolean) => api.get<DashboardStats>("dashboard-stats/", { params: { timestamp_start, timestamp_end, is_real_trading } });
