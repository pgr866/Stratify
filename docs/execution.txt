cargar y mostrar: maker_fee, taker_fee, max_leverage, min_order_amount, max_order_amount, precision_amount, precision_price

rellenar: initial_tradable_value = 1000, leverage = 20

en back:

cargar e iterar: timestamp, open, high, low, close, volume, ...indicators

  position_amount = position_amount[-1] ?? 0
  avg_entry_price = avg_entry_price[-1] ?? 0
  remaining_tradable_value = remaining_tradable_value[-1] ?? initial_tradable_value
  position_value = -1 * position_amount * (2 * avg_entry_price - close) if position_amount < 0 else position_amount * close
  total_value = position_value + remaining_tradable_value

  if (order_conditions):
    recibe: type, side, order_amount, order_price
    fee = taker_fee if type == "market" else maker_fee
    order_value = abs(order_amount) * order_price * (1 + fee) if position_amount * order_amount >= 0 else position_value * order_amount / position_amount * (1 - fee)
    remaining_tradable_value -= order_value
    if position_amount * order_amount >= 0:
      avg_entry_price = (avg_entry_price * abs(position_amount) + order_price * abs(order_amount)) / (abs(position_amount) + abs(order_amount))
    position_amount += order_amount
    position_value = -1 * position_amount * (2 * avg_entry_price - order_price) if position_amount < 0 else position_amount * order_price
    total_value = position_value + remaining_tradable_value
    
    abs_profit = -1 * abs(order_amount) * avg_entry_price - order_value if position_amount * order_amount < 0 else -1 * abs(order_amount) * order_price * fee
    rel_profit = abs_profit / initial_tradable_value * 100
    abs_cum_profit = abs_cum_profit[-1] + abs_profit
    rel_cum_profit = rel_cum_profit[-1] + rel_profit
    abs_hodling_profit = initial_tradable_value * (close / first_open - 1)
    rel_hodling_profit = (close / first_open - 1) * 100
    abs_runup = 
    rel_runup = 
    abs_drawdown = 
    rel_drawdown = 

order_conditions = [
   {
      conditions: [
         {
            start_parenthesis: false,
            left_operand: 'rsi_14',
            operator: '>' # '==', '!=', '<', '>', '<=', '>=', 'crossunder', 'crossabove' 
            right_operand: 70 * 1,
            end_parenthesis: false,
            logic_operator: 'and', # 'and', 'or', 'xor', ''
         },
         ...
      ],
      orders: [
        {
          type: 'limit', # 'market', 'limit', 'cancel_all_open_orders'
          side: 'buy', # 'buy', 'sell'
          limit_price: 50000, # only if 'limit' type
          stop_price: 50000,
          amount: 0.1, # in quote currency amount, only if cost is not provided
          cost: remaining_tradable_value * 0.1, # only if amount is not provided  
        },
        ...
      ]
   },
   ...
]