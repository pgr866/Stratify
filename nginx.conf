user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    #tcp_nopush on;

    keepalive_timeout 65;

    gzip on;

    include /etc/nginx/conf.d/*.conf;

    # HTTP configuration
    server {
        listen 80;
        server_name ${ALLOWED_HOST};

        # Serve the .well-known/acme-challenge folder for the Certbot challenge
        location /.well-known/acme-challenge/ {
            root /usr/share/nginx/html;
        }

        # Redirect all HTTP traffic to HTTPS
        return 301 https://$host$request_uri;
    }

    # HTTPS (SSL) configuration
    server {
        listen 443 ssl;
        server_name ${ALLOWED_HOST};

        # Paths to the SSL certificates
        ssl_certificate /etc/letsencrypt/live/${ALLOWED_HOST}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${ALLOWED_HOST}/privkey.pem;

        # Additional SSL security
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_stapling on;
        ssl_stapling_verify on;

        # Add security headers
        add_header Referrer-Policy "no-referrer";
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()";
        add_header Expect-CT "max-age=86400, enforce";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header Content-Security-Policy "default-src 'self';
                                            script-src 'self' https://accounts.google.com;
                                            style-src 'self' https://fonts.googleapis.com 'sha256-vYsDp67kHU90ZjsVcvaAy4u5cckDCiQz+o71a+rpGoo=' 'sha256-CYQvm9FImp+2UIm3YYS2mta1GLoWribsg8cvl/93QlE=' 'sha256-3pRED1tOXas1FXFoPb9TGCjmYe9XQsmO9OV23khV2nY=';
                                            font-src 'self' https://fonts.gstatic.com;
                                            object-src 'none';
                                            img-src 'self';
                                            frame-src 'self' https://accounts.google.com;
                                            upgrade-insecure-requests;" always;
        add_header Cross-Origin-Opener-Policy same-origin-allow-popups;
        add_header Cross-Origin-Embedder-Policy require-corp;

        # Serve the frontend (React)
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;
        }

        # Redirect requests to the backend (Django)
        location /api/ {
            proxy_pass http://backend:8000/api/v1/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Additional security
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options "DENY";
        add_header X-XSS-Protection "1; mode=block";

        # Error and access logs
        error_log /var/log/nginx/error.log;
        access_log /var/log/nginx/access.log;
    }
}
