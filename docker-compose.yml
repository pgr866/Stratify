services:
  db:
    image: postgres:17.2
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DJANGO_SUPERUSER_USERNAME}
      POSTGRES_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - /etc/ssl/private/postgresdb.key:/var/lib/postgresql/postgresdb.key
      - /etc/ssl/certs/postgresdb.crt:/var/lib/postgresql/postgresdb.crt
    command: >
      bash -c "if [ \"${DEBUG}\" == \"True\" ]; then
                exec docker-entrypoint.sh postgres -c ssl=off;
              else
                exec docker-entrypoint.sh postgres \
                -c ssl=on \
                -c ssl_cert_file=/var/lib/postgresql/postgresdb.crt \
                -c ssl_key_file=/var/lib/postgresql/postgresdb.key \
                -c ssl_passphrase_command='echo $SSL_PASSPHRASE';
              fi"
    networks:
      - backend

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    # SECURITY WARNING: comment the line below in production!
    #ports: ["8000:8000"]
    depends_on:
      - db
    env_file:
      - .env
    networks:
      - backend
      - frontend

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    # SECURITY WARNING: comment the line below in production!
    #ports: ["5173:5173"]
    depends_on:
      - backend
    env_file:
      - .env
    networks:
      - frontend
    volumes:
      - frontend_dist:/app/dist

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - frontend_dist:/usr/share/nginx/html
      - /etc/letsencrypt:/etc/letsencrypt
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    command: >
      bash -c "[ \"${DEBUG}\" == \"True\" ] && exit 0; exec nginx -g 'daemon off;'"
    networks:
      - frontend
      - backend

volumes:
  postgres_data:
    driver: local
  frontend_dist:
    driver: local

networks:
  backend:
  frontend: