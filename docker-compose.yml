services:
  db:
    image: postgres:17.2
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - /etc/ssl/certs/postgresdb.crt:/etc/ssl/certs/postgresdb.crt:ro
      - /etc/ssl/private/postgresdb.key:/etc/ssl/private/postgresdb.key:ro
      - /etc/ssl/certs/ca.crt:/etc/ssl/certs/ca.crt:ro
    command: >
      bash -c "if [ \"${DEBUG}\" = \"True\" ]; then
                docker-entrypoint.sh postgres -c listen_addresses='db' -c ssl=off;
              else
                docker-entrypoint.sh postgres -c listen_addresses='db' -c ssl=on -c ssl_cert_file=/etc/ssl/certs/postgresdb.crt -c ssl_key_file=/etc/ssl/private/postgresdb.key -c ssl_ca_file=/etc/ssl/certs/ca.crt -c ssl_passphrase_command='echo $POSTGRES_SSL_PASSPHRASE';
              fi"
    networks:
      - backend
    restart: always

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    volumes:
      - /etc/ssl/certs/redis.crt:/etc/ssl/certs/redis.crt:ro
      - /etc/ssl/private/redis.key:/etc/ssl/private/redis.key.enc:ro
      - /etc/ssl/certs/postgresdb.crt:/etc/ssl/certs/postgresdb.crt:ro
      - /etc/ssl/private/postgresdb.key:/etc/ssl/private/postgresdb.key.enc:ro
      - /etc/ssl/certs/ca.crt:/etc/ssl/certs/ca.crt:ro
    tmpfs:
      - /etc/ssl/private_decrypted
    # SECURITY WARNING: comment the 2 lines below in production!
    #ports: ["8000:8000"]
    #develop: { watch: [ { action: sync, path: ./backend, target: /app, ignore: [venv/] } ] } # docker compose up --build --watch
    depends_on:
      - db
      - redis
    env_file:
      - .env
    networks:
      - backend
      - frontend
    restart: always

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    environment:
      DEBUG: ${DEBUG}
      VITE_ENV_PATH: ${VITE_ENV_PATH}
      VITE_GOOGLE_CLIENT_ID: ${VITE_GOOGLE_CLIENT_ID}
      VITE_GITHUB_CLIENT_ID: ${VITE_GITHUB_CLIENT_ID}
    volumes:
      - frontend_dist:/app/dist
    # SECURITY WARNING: comment the 2 lines below in production!
    #ports: ["5173:5173"]
    #develop: { watch: [ { action: sync, path: ./frontend, target: /app, ignore: [node_modules/] } ] } # docker compose up --build --watch
    depends_on:
      - backend
    networks:
      - frontend
    restart: always
  
  redis:
    image: redis:7.4
    volumes:
      - /etc/ssl/certs/redis.crt:/etc/ssl/certs/redis.crt:ro
      - /etc/ssl/private/redis.key:/etc/ssl/private/redis.key:ro
      - /etc/ssl/certs/ca.crt:/etc/ssl/certs/ca.crt:ro
    command: >
      bash -c "if [ \"${DEBUG}\" = \"True\" ]; then
                redis-server --requirepass ${REDIS_PASSWORD} --bind redis;
              else
                redis-server --requirepass ${REDIS_PASSWORD} --bind redis --protected-mode yes --save '' --appendonly no --maxmemory 256mb --maxmemory-policy allkeys-lru --tls-port 6380 --port 0 --tls-cert-file /etc/ssl/certs/redis.crt --tls-key-file /etc/ssl/private/redis.key --tls-ca-cert-file /etc/ssl/certs/ca.crt --tls-key-file-pass ${REDIS_SSL_PASSPHRASE} --tls-auth-clients yes;
              fi"
    networks:
      - backend
    restart: always

  nginx:
    image: nginx:1.27.3
    environment:
      ALLOWED_HOST: ${ALLOWED_HOST}
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf.tmp:ro
      - frontend_dist:/usr/share/nginx/html:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    command: >
      bash -c "if [ \"${DEBUG}\" = \"True\" ]; then
                sleep infinity;
              else
                envsubst '$$ALLOWED_HOST' < /etc/nginx/nginx.conf.tmp > /etc/nginx/nginx.conf &&
                nginx -g 'daemon off;'
              fi"
    networks:
      - frontend
      - backend
    restart: always

volumes:
  postgres_data:
    driver: local
  frontend_dist:
    driver: local

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge
